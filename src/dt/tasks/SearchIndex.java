package dt.tasks;

import java.util.Arrays;

/*

Есть текст T и строка S. Нужно найти индекс первого вхождения строки S в текст T. Перестановка символов неважна.

То есть по сути нужно найти индекс первого вхождение одной из всех возможных перестановок строки S в тексте T.

        Пример:
T: Я шёл по улице, капал дождь, было пасмурно, но моё настроение было на высоте, ведь я решил эту алгоритмическую задачу!

S: жоддь

Ответ: 22

Пояснение: индексация текста с нуля. Найдено слово дождь, так как существует перестановка жоддь -> дождь. Слово дождь в тексте начинается с 22 индекса
*/


public class SearchIndex {
    /**
     *НЕ РАБОТАЕТ ДЛЯ СЛУЧАЕВ, КОГДА s - НЕ ЯВЛЯЕТСЯ СЛОВОМ. НУЖНО УБРАТЬ ИДЕИ СПЛИТОВ ДЛЯ ДРУГИХ СЛУЧАЕВ.
     *
     * Прикольное решение. Сумма кодов символов в строке одинаковая вне зависимости от порядка - поэтому просто используем этот, как контрольную сумму.
     * Решение работает по принципы иквелс и хэшкод. Сначала проверяем хэш-сумму, если совпала - сравниваем элементы.
     * Сплитим строку, отделяя пробелы и знаки препинания с помощью регулярки
     * Идем по массиву строк, если сумма символов очередной строки равна сумме символов входно стрки - делаем проверку.
     * Если остортирванные строки равны - возврщвем индекс. (вторая проверка нужна, что коллизии чекать, типо суммы индексов таких строк равны: гожеь == жоддь == дождь)
     *
     * P.S. Если искомая строка - не одна строка, то сплит не подходит. Нужно искать иначе.
     * Тогда можно сохранить в хэшсет коды символов и если символ входит в хэшсет - суммирем его во временную сумму,
     * делаем это до тех пор, пока сумма не сравняется с нашей, но если встретили символ не из хэшсета - очищаем сумму, идем дальше.
     */
    public int searchIndex(String text, String s) {
        int sumS = s.chars().sum();

        String[] t = text.split("[\\s,;:.!?-]+");

        for (String str : t) {
            if(str.chars().sum() == sumS){
                char[] ts = str.toCharArray();
                char[] ss = s.toCharArray();
                Arrays.sort(ts);
                Arrays.sort(ss);
                if(Arrays.equals(ts, ss)) {
                    return text.indexOf(str);
                }
            }
        }
        return -1;
    }
}
